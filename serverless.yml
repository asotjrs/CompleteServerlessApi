service: myserverlessproject

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: "*"
  apiGateway:
    apiKeys:
      - free:
          - myFreeAPIKey
      - paid:
          - myPaidAPIKey
    usagePlan:
      - free:
          quota:
            limit: 10
            period: MONTH
          throttle:
            rateLimit: 3
            burstLimit: 6
      - paid:
          quota:
            limit: 20
            period: MONTH
          throttle:
            rateLimit: 6
            burstLimit: 12

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: theveryuniqslsbcktproj
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          private: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: sendEmail
          method: POST
          cors: true

  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: chuck-nouris/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: http://api.icndb.com/{proxy}
            parameters:
              paths:
                proxy: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
